# -*- encoding: utf-8 -*-
import web
from web import form
from web.contrib.template import render_mako
import anydbm

render = web.template.render('templates/')

urls = ('/', 'index',
        '/pagina1', 'pagina1',
        '/pagina2', 'pagina2',
        '/pagina3', 'pagina3',
        '/pagina4', 'pagina4')

app = web.application(urls, locals())

makos = render_mako(
        directories=['templates'],
        input_encoding='utf-8',
        output_encoding='utf-8')

login = form.Form(
    form.Textbox('Usuario', class_="form-control"),
    form.Password('Contrasena', class_="form-control"),
    form.Checkbox('Recuerdame', 
                  value='true'),
    form.Button('Entrar', _class="button btn-default"))

registro = form.Form(
    form.Textbox('Nombre', 
                 form.notnull,
                 class_='form-control'),
    form.Textbox('Apellidos',
                 form.notnull,
                 class_='form-control'),
    form.Textbox('Email',
                 form.notnull,
                 form.regexp('[^@]+@[^@]+\.[^@]+', 'Debe se ser un email'),
                 class_='form-control'),
    form.Dropdown('Dia', 
                  range(1, 31),
                  class_='form-control'),
    form.Dropdown('Mes', 
                  range(1, 12),
                  class_='form-control'),
    form.Dropdown('ano', 
                  range(1900, 2014),
                  class_='form-control'),
    form.Textarea('Direccion',
                  form.notnull,
                  class_='form-control'),
    form.Password('Contrasena',
                  form.regexp('[\d\w]{7,}',"Ha de tener al menos 7 caracteres"),
                  class_='form-control'),
    form.Password('Repite contrasena',
                  class_='form-control'),
    form.Radio('Forma de Pago', ['Efectivo', 'VISA'],
               class_='radio-inline'),
    form.Textbox('Numero de tarjeta VISA',
                 form.regexp('([0-9]{4}[\s-]){3}[0-9]{4}', 'La tarjeta ha de ser XXXX-XXXX-XXXX-XXXX con guiones o con espacios'),
                 class_='form-control'),
    form.Checkbox('Acepta las condiciones y privacidad de datos', 
                  form.Validator("No has aceptado las condiciones", lambda i: i == 'true'), 
                  value='true'),
    validators=[form.Validator('Las contrasenas han de ser iguales.', lambda i: i.Contrasena == i['Repite contrasena'])])


mensaje = "Bienvenido,  <a href='/'>Salir</a>" 

contentbody= "En un lugar de la Mancha, de cuyo nombre no quiero acordarme, no ha mucho tiempo que vivia un hidalgo de los de lanza en astillero, adarga antigua, rocin flaco y galgo corredor."

sesion = web.session.Session(app, 
      web.session.DiskStore('sessions'))

# https://docs.python.org/2/library/anydbm.html Doc anydbm
def traerDatosBD():
    datos = {}
    miDB= anydbm.open('miDatabase', 'r')
    for k, v in miDB.iteritems():
        datos[k] = v
    db.close()
    return data

def insertarDatosForm():
    conDatos = form.Form(
    form.Textbox('Nombre', 
                 form.notnull,
                 class_='form-control',
                 value=str(data["nombre"])),
    form.Textbox('Apellidos',
                 form.notnull,
                 class_='form-control',
                 value=str(data["apellidos"])),
    form.Textbox('Email',
                 form.notnull,
                 form.regexp('[^@]+@[^@]+\.[^@]+', 'Debe se ser un email'),
                 class_='form-control',
                 value=str(data["email"])),
    form.Dropdown('Dia', 
                  range(1, 31),
                  class_='form-control',
                  value=str(data["Dia"])),
    form.Dropdown('Mes', 
                  range(1, 12),
                  class_='form-control',
                  value=str(data["Mes"])),
    form.Dropdown('ano', 
                  range(1900, 2014),
                  class_='form-control',
                  value=str(data["ano"])),
    form.Textarea('Direccion',
                  form.notnull,
                  class_='form-control',
                  value=str(data["direccion"])),
    form.Password('Contrasena',
                  form.regexp('[\d\w]{7,}',"Ha de tener al menos 7 caracteres"),
                  class_='form-control',
                  value=str(data["contrasena"])),
    form.Password('Repite contrasena',
                  class_='form-control'),
    form.Radio('Forma de Pago', ['Efectivo', 'VISA'],
               class_='radio-inline',
               value=str(data["tipoPago"])),
    form.Textbox('Numero de tarjeta VISA',
                 form.regexp('([0-9]{4}[\s-]){3}[0-9]{4}', 'La tarjeta ha de ser XXXX-XXXX-XXXX-XXXX con guiones o con espacios'),
                 class_='form-control',
                 value=str(data["visa"])),
    form.Checkbox('Acepta las condiciones y privacidad de datos', 
                  form.Validator("No has aceptado las condiciones", lambda i: i == 'true'), 
                  value='true'),
    validators=[form.Validator('Las contrasenas han de ser iguales.', lambda i: i.Contrasena == i['Repite contrasena'])])


    
def ultimas():
    return"\
            <li>" + str(sesion.pag1) + "</li> \
            <li>" + str(sesion.pag2) + "</li> \
            <li>" + str(sesion.pag3) +"</li>"
 
class index:
    def GET(self):
        if sesion.user:
            loginForm=login();
            return makos.mako_template(titulo = "Inicio", form = loginForm)
        else:
            sesion.pag3 = sesion.pag2
            sesion.pag2 = sesion.pag1
            sesion.pag1 = "Inicio";
            return makos.mako_template(titulo = "Inicio", ultimas = ultimas(), content = contentbody, mensaje = (sesion.user) + mensaje)

    def POST(self):
        loginform = loginForm()
        if not loginForm.validates():
            return makos.mako_template(form = loginForm)        
        else:
            input_t = web.input()
            user = input_t.Usuario
            sesion.user = user
            sesion.pag1 = "null"
            sesion.pag2 = "null"
            sesion.pag3 = "null"
            return makos.mako_template(titulo = "Inicio", mensaje = (sesion.user) + mensaje)

class pagina1:
    def GET(self):
        sesion.user == null:
            loginForm=login();
            return makos.mako_template(titulo = "Pagina 1", form = loginForm)
        else:
            sesion.pag3 = sesion.pag2
            sesion.pag2 = sesion.pag1
            sesion.pag1 = "Pagina 1"
            return makos.mako_template(titulo = "Pagina 1",ultimas = ultimas(),mensaje = (sesion.user) + mensaje)
        
    def POST(self):
        loginform = loginForm()
        if not loginForm.validates():
            return makos.mako_template(form = loginForm)        
        else:
            input_t = web.input()
            user = input_t.Usuario
            sesion.user = user
            sesion.pag1 = "null"
            sesion.pag2 = "null"
            sesion.pag3 = "null"
            return makos.mako_template(titulo = "Pagina 1", mensaje = (sesion.user) + mensaje)

class pagina2:
    def GET(self):
        sesion.user != null:
            loginForm=login();
            return makos.mako_template(titulo = "Pagina 2", form = loginForm)
        else:
            sesion.pag3 = sesion.pag2
            sesion.pag2 = sesion.pag1
            sesion.pag1 = "Pagina 2"
            return makos.mako_template(titulo = "Pagina 2",ultimas = ultimas(),mensaje = (sesion.user) + mensaje)
        
    def POST(self):
        loginform = loginForm()
        if not loginForm.validates():
            return makos.mako_template(form = loginForm)        
        else:
            input_t = web.input()
            user = input_t.Usuario
            sesion.user = user
            sesion.pag1 = "null"
            sesion.pag2 = "null"
            sesion.pag3 = "null"
            return makos.mako_template(titulo = "Pagina 2", mensaje = (sesion.user) + mensaje)

class pagina3:
    def GET(self):
        if sesion.user != null:
            loginForm = login();
            return makos.mako_template(titulo = "Pagina 3", form = loginForm)
        else:
            sesion.pag3 = sesion.pag2
            sesion.pag2 = sesion.pag1
            sesion.pag1 = "Pagina 3"
            return makos.mako_template(titulo = "Pagina 3",ultimas = ultimas(), mensaje = (sesion.user) + mensaje)
        
    def POST(self):
        loginform = login()
        if not loginForm.validates():
            return makos.mako_template(form = loginForm)        
        else:
            input_t = web.input()
            user = input_t.Usuario
            sesion.user = user
            sesion.pag1 = "null"
            sesion.pag2 = "null"
            sesion.pag3 = "null"
            return makos.mako_template(titulo = "Pagina 3", mensaje = (sesion.user) + mensaje)

class pagina4:
    def GET(self):
        sesion.user != null:
            loginForm=login();
            return makos.mako_template(titulo = "Pagina 4", form = loginForm)
        else:
            sesion.pag3 = sesion.pag2
            sesion.pag2 = sesion.pag1
            sesion.pag1 = "Pagina 4"
            return makos.mako_template(titulo = "Pagina 4", ultimas = ultimas(), mensaje = (sesion.user) + mensaje)
        
    def POST(self):
        loginform = loginForm()
        if not loginForm.validates():
            return makos.mako_template(form = loginForm)        
        else:
            input_t = web.input()
            user = input_t.Usuario
            sesion.user = user
            sesion.pag1 = "null"
            sesion.pag2 = "null"
            sesion.pag3 = "null"
            return makos.mako_template(titulo = "Pagina 4", mensaje = (sesion.user) + mensaje)


if __name__=="__main__":
    web.internalerror = web.debugerror
    app.run()
