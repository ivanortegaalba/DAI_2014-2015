# -*- encoding: utf-8 -*-
import web
from web import form
from web.contrib.template import render_mako
import anydbm
from warnings import catch_warnings

web.config.debug = True

render = web.template.render('templates/')

urls = ('/', 'index',
		'/pagina1', 'pagina1',
		'/pagina2', 'pagina2',
		'/pagina3', 'pagina3',
		'/pagina4', 'pagina4',
		'/registro', 'Registro',
		'/modificar', 'Modificar'
		'/salir','cerrarSesion')

app = web.application(urls, locals(),autoreload=False)

makos = render_mako(
		directories=['templates'],
		input_encoding='utf-8',
		output_encoding='utf-8')

session = web.session.Session(app, 
	  web.session.DiskStore('sessiones'))

login = form.Form(
	form.Textbox('Usuario', class_="form-control"),
	form.Password('Contrasena', class_="form-control"),
	form.Checkbox('Recuerdame', 
				  value='true'),
	form.Button('Entrar', _class="button btn-default"))

mensaje = ",  Bienvenido.  <a href='/salir'>Salir</a>" 

FormularioRegistro = form.Form(
	form.Textbox('Nombre', 
				 form.notnull,
				 class_='form-control'),
	form.Textbox('Apellidos',
				 form.notnull,
				 class_='form-control'),
	form.Textbox('Email',
				 form.notnull,
				 form.regexp('[^@]+@[^@]+\.[^@]+', 'Debe se ser un email'),
				 class_='form-control'),
	form.Dropdown('Dia', 
				  range(1, 31),
				  class_='form-control'),
	form.Dropdown('Mes', 
				  range(1, 12),
				  class_='form-control'),
	form.Dropdown('Ano', 
				  range(1900, 2014),
				  class_='form-control'),
	form.Textarea('Direccion',
				  form.notnull,
				  class_='form-control'),
	form.Password('Contrasena',
				  form.regexp('[\d\w]{7,}',"Ha de tener al menos 7 caracteres"),
				  class_='form-control'),
	form.Password('Contrasena2',
				  class_='form-control',
				  description = 'Repite contrasena'),
	form.Radio('Pago', ['Efectivo', 'VISA'],
			   class_='radio-inline'),
	form.Textbox('Visa',
				 form.regexp('([0-9]{4}[\s-]){3}[0-9]{4}', 'La tarjeta ha de ser XXXX-XXXX-XXXX-XXXX con guiones o con espacios'),
				 class_='form-control',
				 description = "Numero de tarjeta VISA"),
	form.Checkbox('Acepta las condiciones y privacidad de datos', 
				  form.Validator("No has aceptado las condiciones", lambda i: i == 'true'), 
				  value='true'),
	validators=[form.Validator('Las contrasenas han de ser iguales.', lambda i: i.Contrasena == i.Contrasena2)])

def insertarDatosBD(datos):
	miDB = anydbm.open('miDatabase', 'c')
	miDB["nombre"] = str(datos.nombre)
	miDB["apellidos"] = str(datos.apellidos)
	miDB["email"] = str(datos.email)
	miDB["dia"] = str(datos.dia)
	miDB["mes"] = str(datos.mes)
	miDB["ano"] = str(datos.ano)
	miDB["descripcion"] = str(datos.direccion)
	miDB["contrasena"] = str(datos.contrasena)
	miDB["contrasena2"] = str(datos.contrasena2)
	miDB["pago"] = str(datos.pago)
	miDB["visa"] = str(datos.visa)	
	miDB.close()	
	
def imprimirDatosBD(datos):
	return ('<p>' + str(datos.nombre) + '</p>\
	<p>' + str(datos.apellidos) + '</p>\
	<p>' + str(datos.email) + '</p>\
	<p>' + str(datos.dia) + '</p>\
	<p>' + str(datos.mes) + '</p>\
	<p>' + str(datos.ano) + '</p>\
	<p>' + str(datos.direccion) + '</p>\
	<p>' + str(datos.contrasena) + '</p>\
	<p>' + str(datos.contrasena2) + '</p>\
	<p>' + str(datos.pago) + '</p>\
	<p>' + str(datos.visa) + '</p>')
	
# https://docs.python.org/2/library/anydbm.html Doc anydbm
def traerDatosBD():
	datos = {}
	miDB= anydbm.open('miDatabase', 'r')
	for k, v in miDB.iteritems():
		datos[k] = v
	miDB.close()
	return datos

def insertarDatosForm(data):
	conDatos = form.Form(
		form.Textbox('Nombre', 
					 form.notnull,
					 class_='form-control',
					 value=str(data["nombre"])),
		form.Textbox('Apellidos',
					 form.notnull,
					 class_='form-control',
					 value=str(data["apellidos"])),
		form.Textbox('Email',
					 form.notnull,
					 form.regexp('[^@]+@[^@]+\.[^@]+', 'Debe se ser un email'),
					 class_='form-control',
					 value=str(data["email"])),
		form.Dropdown('Dia', 
					  range(1, 31),
					  class_='form-control',
					  value=data["dia"]),
		form.Dropdown('Mes', 
					  range(1, 12),
					  class_='form-control',
					  value=data["mes"]),
		form.Dropdown('Ano', 
					  range(1900, 2014),
					  class_='form-control',
					  value=data["ano"]),
		form.Textarea('Direccion',
					  form.notnull,
					  class_='form-control',
					  value=str(data["direccion"])),
		form.Password('Contrasena',
					  form.regexp('[\d\w]{7,}',"Ha de tener al menos 7 caracteres"),
					  class_='form-control',
					  value=str(data["contrasena"])),
		form.Password('Contrasena2',
					  class_='form-control',
					  description="Repite contrasena: "),
		form.Radio('Pago', ['Efectivo', 'VISA'],
				   class_='radio-inline',
				   checked=str(data["pago"])),
		form.Textbox('Visa',
					 form.regexp('([0-9]{4}[\s-]){3}[0-9]{4}', 'La tarjeta ha de ser XXXX-XXXX-XXXX-XXXX con guiones o con espacios'),
					 class_='form-control',
					 description="Numero de tarjeta VISA: ",
					 value=str(data["visa"])),
		validators=[form.Validator('Las contrasenas han de ser iguales.', lambda i: i.Contrasena == i['Repite contrasena'])])

def insertarUltimaPagina(ultima):
	session.pag3 = session.pag2
	session.pag2 = session.pag1
	session.pag1 = str(ultima)
	
contentbody= "En un lugar de la Mancha, de cuyo nombre no quiero acordarme, no ha mucho tiempo que vivia un hidalgo de los de lanza en astillero, adarga antigua, rocin flaco y galgo corredor."

def mostrarUltimas():
	return"\
			<li>" + str(session.pag1) + "</li> \
			<li>" + str(session.pag2) + "</li> \
			<li>" + str(session.pag3) +"</li>"
 
class index:
	paginaActual = "Inicio"
	def GET(self):
		if 'user' not in session:
			loginForm = login() 
			registroForm = FormularioRegistro()
			return makos.mako_template(varDep = "", titulo = self.paginaActual, form = loginForm)
		else:
			insertarUltimaPagina(self.paginaActual)
			return makos.mako_template(varDep = "",titulo = self.paginaActual, ultimas = mostrarUltimas(), formRegistro = registro, content = contentbody, mensaje = (session.user) + mensaje)

	def POST(self):
		loginForm = login()
		registroForm = FormularioRegistro()
		if not loginForm.validates():
			return makos.mako_template(varDep = "",titulo = self.paginaActual, form = loginForm)	

		else:
			input_t = web.input()
			user = input_t.Usuario
			session.user = user
			session.pag1 = "null"
			session.pag2 = "null"
			session.pag3 = "null"
			return makos.mako_template(varDep = "",titulo = self.paginaActual, mensaje = (session.user) + mensaje)

class pagina1:
	paginaActual = "Pagina 1"
	def GET(self):
		if 'user' not in session:
			loginForm=login()
			registroForm = FormularioRegistro()
			return makos.mako_template(varDep = "",titulo =self.paginaActual, form = loginForm)
		else:
			insertarUltimaPagina(self.paginaActual)
			return makos.mako_template(varDep = "",titulo = self.paginaActual, ultimas = mostrarUltimas(), content = contentbody, mensaje = (session.user) + mensaje)

	def POST(self):
		loginForm = login()
		registroForm = FormularioRegistro()
		if not loginForm.validates():
			return makos.mako_template(varDep = "",form = loginForm)		
		else:
			input_t = web.input()
			user = input_t.Usuario
			session.user = user
			session.pag1 = "null"
			session.pag2 = "null"
			session.pag3 = "null"
			return makos.mako_template(varDep = "",titulo = self.paginaActual, mensaje = (session.user) + mensaje)

class pagina2:
	paginaActual = "Pagina 2"
	
	def GET(self):
		if 'user' not in session:
			loginForm =login()
			registroForm = FormularioRegistro()
			return makos.mako_template(varDep = "",titulo =self.paginaActual, form = loginForm )
		else:
			insertarUltimaPagina(self.paginaActual)
			return makos.mako_template(varDep = "",titulo = self.paginaActual, ultimas = mostrarUltimas(), content = contentbody, mensaje = (session.user) + mensaje)

	def POST(self):
		loginForm = login()
		registroForm = FormularioRegistro()
		if not loginForm.validates():
			return makos.mako_template(varDep = "",form = loginForm)		
		else:
			input_t = web.input()
			user = input_t.Usuario
			session.user = user
			session.pag1 = "null"
			session.pag2 = "null"
			session.pag3 = "null"
			return makos.mako_template(varDep = "",titulo =self.paginaActual, mensaje = (session.user) + mensaje)

class pagina3:
	paginaActual = "Pagina 3"
	def GET(self):
		if 'user' not in session:
			loginForm = login() 
			registroForm = FormularioRegistro()
			return makos.mako_template(varDep = "",titulo =self.paginaActual, form = loginForm)
		else:
			insertarUltimaPagina(self.paginaActual)
			return makos.mako_template(varDep = "",titulo = self.paginaActual, ultimas = mostrarUltimas(), content = contentbody, mensaje = (session.user) + mensaje)

	def POST(self):
		loginForm = login()
		registroForm = FormularioRegistro()
		if not loginForm.validates():
			return makos.mako_template(varDep = "",form = loginForm)		
		else:
			input_t = web.input()
			user = input_t.Usuario
			session.user = user
			session.pag1 = "null"
			session.pag2 = "null"
			session.pag3 = "null"
			return makos.mako_template(varDep = "",titulo =self.paginaActual, mensaje = (session.user) + mensaje)

class pagina4:
	paginaActual = "Pagina 4"
	def GET(self):
		if 'user' not in session:
			loginForm = login()
			registroForm = FormularioRegistro()
			return makos.mako_template(varDep = "",titulo =self.paginaActual, form = loginForm)
		else:
			insertarUltimaPagina(self.paginaActual)
			return makos.mako_template(varDep = "",titulo = self.paginaActual, ultimas = mostrarUltimas(), content = contentbody, mensaje = (session.user) + mensaje)

	def POST(self):
		loginForm = login()
		registroForm = FormularioRegistro()
		if not loginForm.validates():
			return makos.mako_template(varDep = "",form = loginForm)		
		else:
			input_t = web.input()
			user = input_t.Usuario
			session.user = user
			session.pag1 = "null"
			session.pag2 = "null"
			session.pag3 = "null"
			return makos.mako_template(varDep = "",titulo =self.paginaActual, mensaje = (session.user) + mensaje)

class Registro:
	paginaActual = "Registro"
	def GET(self):
		registroForm = FormularioRegistro()
		return makos.mako_template(varDep = "", titulo = self.paginaActual, formRegistro = registroForm)
	
	def POST(self):
		registroForm = FormularioRegistro()
		if not registroForm.validates():
			return makos.mako_template(varDep = "",titulo = self.paginaActual, formRegistro = registroForm )
		else:
			datos = web.input()
			web.debug(datos)
			insertarDatosBD(datos)
			datos = traerDatosBD()
			web.debug(datos)
			registroForm = insertarDatosBD(datos)
			
			return makos.mako_template(varDep = "", titulo = self.paginaActual, content = registroForm,mensaje = "Registro exitoso")

class Modificar:
	paginaActual = "Modificar"
	def GET(self):
		insertarUltimaPagina(self.paginaActual)
		datos = traerDatosBD()
		registroForm = insertarDatosForm(datos)
		insertarUltimaPagina(self.paginaActual)
		return makos.mako_template(varDep = "",titulo = self.paginaActual, ultimas = mostrarUltimas(), formRegistro = registroForm)

	def POST(self):
		registroForm = FormularioRegistro()
		if not loginForm.validates():
			return makos.mako_template(varDep = "",form = registroForm)		
		else:
			datos = web.input()
			insertarDatosBD(datos);
			
class cerrarSesion:
	def GET(self):
		session.kill()
		raise web.seeother('/')

if __name__=="__main__":
	web.internalerror = web.debugerror
	app.run()
